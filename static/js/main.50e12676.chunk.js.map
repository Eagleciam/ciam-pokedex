{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","state","name","monster","url","image","fetch","this","then","response","json","setState","sprites","front_default","console","log","className","alt","src","Component","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","searchField","bind","pokes","results","e","target","value","filteredMonsters","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qVAoCeA,G,oEA/BX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,KAAMF,EAAMG,QAAQD,KACpBE,IAAKJ,EAAMG,QAAQC,IACnBC,MAAO,MALG,E,gEAQE,IAAD,OACfC,MAAMC,KAAKP,MAAMG,QAAQC,KACtBI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACF,EAAKC,SAAS,CACZN,MAAOK,EAAKE,QAAQC,mBAI5BC,QAAQC,IAAIR,KAAKN,MAAMI,S,+BAEjB,IAAD,EACkBE,KAAKN,MAAvBC,EADA,EACAA,KAAKE,EADL,EACKA,IAAIC,EADT,EACSA,MACd,OACI,yBAAKW,UAAU,kBACf,yBAAKC,IAAI,WAAWC,IAAKb,IACzB,4BAAKH,GACL,2BAAIE,Q,GA3BGe,cCCNC,EAAW,SAAApB,GAAK,OACzB,yBAAKgB,UAAY,aACZhB,EAAMqB,SAASC,KAAI,SAAAnB,GAAO,OACvB,kBAAC,EAAD,CAAMoB,IAAKpB,EAAQC,IAAKD,QAASA,SCHhCqB,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACAV,UAAU,SACVW,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8CCG,E,kDAhDf,aAAc,IAAD,8BACX,gBACK5B,MAAQ,CACXoB,SAAU,GACVS,YAAa,IAGf,EAAKJ,aAAe,EAAKA,aAAaK,KAAlB,gBAPT,E,gEAUO,IAAD,OACjBzB,MAAM,sCACLE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAwB,GAAK,OAAI,EAAKrB,SAAS,CAACU,SAAUW,EAAMC,e,mCAGnCC,GACX3B,KAAKI,SAAS,CAACmB,YAAaI,EAAEC,OAAOC,U,+BAO5B,IAAD,EAE0B7B,KAAKN,MAA9BoB,EAFD,EAECA,SAAUS,EAFX,EAEWA,YACXO,EAAmBhB,EAASiB,QAAO,SAAAnC,GAAO,OAC9CA,EAAQD,KAAKqC,cAAcC,SAASV,EAAYS,kBAGlD,OACE,yBAAKvB,UAAU,OACb,4CACA,kBAAC,EAAD,CACES,YAAY,wBACZC,aAAcnB,KAAKmB,eAErB,kBAAC,EAAD,CAAUL,SAAYgB,S,GAxCZlB,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.50e12676.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './card.styles.css'\r\n\r\nclass Card extends Component {\r\n    \r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            name: props.monster.name,\r\n            url: props.monster.url,\r\n            image: null\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch(this.props.monster.url)\r\n          .then(response => response.json())\r\n          .then(json =>{ \r\n              this.setState({\r\n                image: json.sprites.front_default\r\n             });\r\n          });\r\n        \r\n        console.log(this.state.image)\r\n      }\r\n    render() {\r\n        var {name,url,image} = this.state\r\n        return (\r\n            <div className='card-container'>\r\n            <img alt='puchimon' src={image}></img>\r\n            <h2>{name}</h2>\r\n            <p>{url}</p>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport Card from '../card/card.component';\r\n\r\nexport const CardList = props => ( \r\n    <div className = 'card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.url} monster={monster}></Card>\r\n        ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n    className='search'\r\n    type='search' \r\n    placeholder={placeholder}\r\n    onChange={handleChange}/>\r\n\r\n\r\n)","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component{\n\nconstructor(){\n  super();\n  this.state = {\n    monsters: [],\n    searchField: ''\n  };\n\n  this.handleChange = this.handleChange.bind(this)\n}\n\ncomponentDidMount(){\n  fetch('https://pokeapi.co/api/v2/pokemon/')\n  .then(response => response.json())\n  .then(pokes => this.setState({monsters: pokes.results}))\n}\n\nhandleChange(e){\n  this.setState({searchField: e.target.value});\n}\n\n// onSearchChange = event =>{\n//   this.setState({searchField: e.target.value});\n// }\n\n  render(){\n\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return (\n      <div className=\"App\">\n        <h1>CIAM Pokedex</h1>\n        <SearchBox \n          placeholder=\"Gotta catch'em all...\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters = {filteredMonsters}>\n  \n        </CardList>\n       \n      </div>\n    ) \n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}